/**

Determine if a Sudoku is valid. The Sudoku board could be partially filled,
where empty cells are filled with the character '.'.

A partially filled sudoku which is valid.

Note:
A valid Sudoku board (partially filled) is not necessarily solvable.
Only the filled cells need to be validated.
*/

const { isValidSudoku } = require('./index');

describe('36. Valid Sudoku', () => {
  it('should be valid', () => {
    const grid = [
      ['.', '.', '.', '1', '4', '.', '.', '2', '.'],
      ['.', '.', '6', '.', '.', '.', '.', '.', '.'],
      ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
      ['.', '.', '1', '.', '.', '.', '.', '.', '.'],
      ['.', '6', '7', '.', '.', '.', '.', '.', '9'],
      ['.', '.', '.', '.', '.', '.', '8', '1', '.'],
      ['.', '3', '.', '.', '.', '.', '.', '.', '6'],
      ['.', '.', '.', '.', '.', '7', '.', '.', '.'],
      ['.', '.', '.', '5', '.', '.', '.', '7', '.']
    ];

    const result = isValidSudoku(grid);
    expect(result).toBe(true);
  });

  it('should be valid', () => {
    const grid = [
      ['.', '.', '.', '.', '.', '.', '.', '.', '2'],
      ['.', '.', '.', '.', '.', '.', '6', '.', '.'],
      ['.', '.', '1', '4', '.', '.', '8', '.', '.'],
      ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
      ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
      ['.', '.', '.', '.', '3', '.', '.', '.', '.'],
      ['5', '.', '8', '6', '.', '.', '.', '.', '.'],
      ['.', '9', '.', '.', '.', '.', '4', '.', '.'],
      ['.', '.', '.', '.', '5', '.', '.', '.', '.']
    ];

    const result = isValidSudoku(grid);
    expect(result).toBe(true);
  });

  it('should not be valid', () => {
    const grid = [
      ['.', '.', '4', '.', '.', '.', '6', '3', '.'],
      ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
      ['5', '.', '.', '.', '.', '.', '.', '9', '.'],
      ['.', '.', '.', '5', '6', '.', '.', '.', '.'],
      ['4', '.', '3', '.', '.', '.', '.', '.', '1'],
      ['.', '.', '.', '7', '.', '.', '.', '.', '.'],
      ['.', '.', '.', '5', '.', '.', '.', '.', '.'],
      ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
      ['.', '.', '.', '.', '.', '.', '.', '.', '.']
    ];

    const result = isValidSudoku(grid);
    expect(result).toBe(false);
  });

  it('should not be valid', () => {
    const grid = [
      ['.', '.', '4', '.', '.', '.', '6', '3', '.'],
      ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
      ['5', '.', '.', '.', '.', '.', '.', '9', '.'],
      ['.', '.', '.', '5', '6', '.', '.', '.', '.'],
      ['4', '.', '3', '.', '.', '.', '.', '.', '1'],
      ['.', '.', '.', '7', '.', '.', '.', '.', '.'],
      ['.', '.', '.', '5', '.', '.', '.', '.', '.'],
      ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
      ['.', '.', '.', '.', '.', '.', '.', '.', '.']
    ];

    const result = isValidSudoku(grid);
    expect(result).toBe(false);
  });
});
